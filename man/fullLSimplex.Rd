% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SignDepth.R
\name{fullLSimplex}
\alias{fullLSimplex}
\title{Full-\code{1}-simplex and full-\code{2}-simplex depth for bivariate data}
\usage{
fullLSimplex(X, naive = NULL)
}
\arguments{
\item{X}{The bivariate dataset represented as a numerical matrix
with two columns and \code{n} rows. The rows of \code{X} are
typically the residuals.}

\item{naive}{Logical indicator whether the naive implementation
in C++ should be used. By default set to \code{FALSE} if \code{n} is
greater than 125, otherwise \code{TRUE} is used. It was observed that
for \code{n} small, the naive implementation tends to be faster. As \code{n}
grows, the non-naive C++ is superior.}
}
\value{
A vector of length \code{2}, both elements are numeric values
between 0 and 1. First element is the full-\code{1}-simplex depth,
that is the same as the two-dimensional simplicial depth of the origin.
The second element it the full-\code{2}-simplex depth, that is the
relative number of non-consecutive pairs of triangles that share two
vertices and both contain the origin.
}
\description{
C++ implementations of the algorithm for
the computation of the full-\code{2}-simplex depth for
two-dimensional data (residuals). The C++ implementation
is the fastest one that should be used in practice; the complexity
of both algorithms is however only O(n^4).
}
\examples{
n = 100
X = matrix(rnorm(2*n),ncol=2)
fullLSimplex(X)
fullLSimplex(X, naive=TRUE)
fullLSimplex(X, naive=FALSE)

n = 20
X = matrix(rnorm(2*n),ncol=2)
fullLSimplex(X)
}
\seealso{
\link{simplLSimplex} for an implementation of the simplified
version of the 1-simplex and 2-simplex depth.
}
